# This CI run builds wheels using the cibuildwheel infrastructure.
# This means it:
# - Uses as old dependencies/infrastructure as possible:
#   - An old manylinux docker container on Linux
#   - An old MACOSX_DEPLOYMENT_TARGET on macOS
#   - An old SYSTEM_VERSION target on Windows
# - Builds OpenMEEG
# - Creates wheels
# - Delocates them
# - Uploads them to TestPyPI (main) or PyPi (releases)
# Most of the config lives in `pyproject.toml` and build_tools/cibw_* scripts.

name: cibuildwheel
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number }}-${{ github.event.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  BUILD_TYPE: Release

# https://cibuildwheel.readthedocs.io/en/stable/setup/#github-actions
jobs:
  build_wheels:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # macos-13 is an intel runner, macos-14 is apple silicon
        include:
          - os: ubuntu-latest
            arch: x86_64
          - os: ubuntu-24.04-arm
            arch: aarch64
          - os: windows-latest
            arch: AMD64
          - os: macos-13
            arch: x86_64
          - os: macos-14
            arch: arm64
    timeout-minutes: 70
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
      - uses: actions/setup-python@v5  # to make before-all work properly
        with:
          python-version: '3.10'
      - uses: hendrikmuhs/ccache-action@v1.2
        if: runner.os != 'Linux'
        with:
          key: ${{ github.job }}-${{ matrix.os }}-${{ matrix.arch }}
      - name: Cache vcpkg
        if: runner.os != 'Linux'
        uses: actions/cache@v4
        with:
          path: |
            vcpkg
            build/vcpkg_installed
          key: ${{ github.job }}-${{ hashFiles('**/vcpkg.json', '**/vcpkg_version.txt') }}-${{ matrix.os }}-${{ matrix.arch }}-0
      - uses: pypa/cibuildwheel@v3.1.3
        with:
          package-dir: ./wrapping/python
          output-dir: wheelhouse
        env:
          CIBW_ARCHS: ${{ matrix.arch }}
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.arch }}
          path: ./wheelhouse/*.whl

  test_wheels:
    needs: build_wheels
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
          - os: windows-latest
            arch: AMD64
          - os: macos-13
            arch: x86_64
          - os: macos-14
            arch: arm64
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - uses: actions/download-artifact@v5
        with:
          path: dist
          merge-multiple: true
          pattern: wheels-${{ matrix.os }}-${{ matrix.arch }}
      - name: Get data
        shell: bash
        run: |
          set -eo pipefail
          git clone --no-checkout https://github.com/openmeeg/openmeeg.git omg
          cd omg
          git sparse-checkout init --cone
          git sparse-checkout set data
          git checkout
          OPENMEEG_DATA_PATH=$(pwd)/data
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            OPENMEEG_DATA_PATH=$(cygpath -w "$OPENMEEG_DATA_PATH")
          fi
          echo "OPENMEEG_DATA_PATH=$OPENMEEG_DATA_PATH" | tee -a $GITHUB_ENV
      - run: ls -alt dist/
        shell: bash
      - run: pip install -v pytest dist/*.whl
        shell: bash
      - run: pytest -m "not slow" --pyargs openmeeg

  upload_test_pypi:
    name: Upload to TestPyPI
    needs: [build_wheels, test_wheels]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v5
        with:
          path: dist
          merge-multiple: true
      - run: ls -alt dist/
      # upload to Test PyPI for every commit on main branch
      - uses: pypa/gh-action-pypi-publish@release/v1
        if: github.event_name == 'push' && github.event.ref == 'refs/heads/main'
        with:
          user: __token__
          password: ${{ secrets.OPENMEEG_TEST_PYPI_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
          skip_existing: true

  upload_pypi:
    name: Upload to PyPI
    needs: [build_wheels, test_wheels]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v5
        with:
          path: dist
          merge-multiple: true
      # upload to PyPI on every tag (we assume these are releases!)
      - uses: pypa/gh-action-pypi-publish@release/v1
        if: github.event_name == 'release' && github.event.action == 'published'
        with:
          user: __token__
          password: ${{ secrets.OPENMEEG_PYPI_TOKEN }}
